@page "/"
@using Sortcery.Api.Contracts.Models
@using Sortcery.Web.Models
@using System.IO
@using Sortcery.Web.Services.Contracts
@inject HttpClient Http
@inject IFoldersService FoldersService

<div class="container-fluid pt-3">
    <div class="form-check">
        <input class="form-check-input" type="checkbox" @bind="ShowOnlyNewFiles" id="showOnlyNewFiles">
        <label class="form-check-label" for="showOnlyNewFiles">
            Show only new files
        </label>
    </div>
</div>

@if (Links == null)
{
    <p>
        <h1>Loading...</h1>
    </p>
}
else
{
    <table class="table table-striped align-middle">
        <thead>
        <tr>
            <th scope="col" class="col-4">Source</th>
            <th scope="col" class="col-8">Destination</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var link in Links)
        {
            <tr>
                <td>
                    <FileInfo File="link.Source"></FileInfo>
                </td>
                <td>
                    @if (link.Editing)
                    {
                        <EditFileData File="link.Guess" OnComplete="_ => link.Editing = false"></EditFileData>
                    }
                    else if (link.Guess != null)
                    {
                        <GuessedFileData File="link.Guess"
                                         Linking="link.Linking"
                                         OnEdit="() => Edit(link)"
                                         OnCancel="() => CancelGuess(link)"
                                         OnLink="async () => await Link(link)">
                        </GuessedFileData>
                    }
                    else if (link.Targets.Count > 0)
                    {
                        @foreach (var target in link.AllTargets)
                        {
                            <FileInfo File="target"></FileInfo>
                        }
                    }
                    else
                    {
                        <button type="button" class="btn btn-success btn-sm" disabled="@link.Guessing" @onclick="async e => await GuessIt(link)"><i class="bi bi-magic"></i> Guess It</button>
                    }
                </td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    private HardLinkViewModel[]? AllLinks { get; set; }

    private HardLinkViewModel[]? NewLinks { get; set; }

    private HardLinkViewModel[]? Links => ShowOnlyNewFiles ? NewLinks : AllLinks;

    public bool ShowOnlyNewFiles { get; set; } = true;

    private async Task GuessIt(HardLinkViewModel link)
    {
        link.Guessing = true;
        try
        {
            var relativeName = link.Source!.RelativeName.Replace(FoldersService.DirectorySeparator, "/");
            var query = Path.Join("api/guess", link.Source!.Dir, relativeName);
            link.Guess = await Http.GetFromJsonAsync<FileData>(query);
        }
        finally
        {
            link.Guessing = false;
        }
    }

    private void Edit(HardLinkViewModel link)
    {
        link.Editing = true;
    }

    private void CancelGuess(HardLinkViewModel link)
    {
        link.Guess = null;
    }

    private async Task Link(HardLinkViewModel link)
    {
        link.Linking = true;
        try
        {
            var relativeName = link.Source!.RelativeName.Replace(FoldersService.DirectorySeparator, "/");
            var query = Path.Join("api/links", link.Source!.Dir, relativeName);
            using var linkResponse = await Http.PostAsJsonAsync(query, link.Guess!);
            linkResponse.EnsureSuccessStatusCode();
            var result = await linkResponse.Content.ReadFromJsonAsync<FileData>();
            link.Targets.Add(result!);
            link.Guess = null;
        }
        finally
        {
            link.Linking = false;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var links = await Http.GetFromJsonAsync<HardLinkData[]>("api/links");
        AllLinks = links != null
            ? links.Select(e => new HardLinkViewModel(e)).ToArray()
            : Array.Empty<HardLinkViewModel>();
        NewLinks = AllLinks.Where(e => e.Targets.Count == 0).ToArray();
    }

}
